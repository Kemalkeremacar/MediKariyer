/**
 * Contact Hooks - Ä°letiÅŸim mesajlarÄ± iÃ§in React Query hooks
 * Service katmanÄ± kaldÄ±rÄ±ldÄ± - API Ã§aÄŸrÄ±larÄ± doÄŸrudan hook'larda
 * Public ve Admin iÅŸlemleri iÃ§in ayrÄ±lmÄ±ÅŸ
 * 
 * Ana Ä°ÅŸlevler:
 * - Public: Mesaj gÃ¶nderme (ContactPage)
 * - Admin: Mesaj listeleme, gÃ¶rÃ¼ntÃ¼leme, yanÄ±tlama (ContactMessagesPage)
 * - Admin: Mesaj durumu gÃ¼ncelleme, silme
 * - Admin: Ä°statistikler ve toplu iÅŸlemler
 * 
 * Cache Stratejisi:
 * - Public mesajlar: ['contact', 'messages'] cache key'i
 * - Admin mesajlar: ['admin', 'contact-messages'] cache key'i
 * - 2 dakika stale time (mesajlar sÄ±k deÄŸiÅŸir)
 * - Background refetch var (admin iÃ§in)
 * 
 * @author MediKariyer Development Team
 * @version 2.1.0
 * @since 2024
 */

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/services/http/client';
import { ENDPOINTS, buildEndpoint, buildQueryString } from '@config/api.js';
import { showToast } from '@/utils/toastUtils';

// ðŸ”¹ Public: Mesaj GÃ¶nderme Hook'u
export const useSendMessage = () => {
  return useMutation({
    mutationFn: async (messageData) => {
      return await apiRequest.post(ENDPOINTS.CONTACT.MESSAGES, messageData);
    },
    onSuccess: (result) => {
      showToast.success('MesajÄ±nÄ±z baÅŸarÄ±yla gÃ¶nderildi. En kÄ±sa sÃ¼rede size dÃ¶nÃ¼ÅŸ yapacaÄŸÄ±z.');
    },
    onError: (error) => {
      console.error('Mesaj gÃ¶nderme hatasÄ±:', error);
      showToast.error('Mesaj gÃ¶nderilemedi. LÃ¼tfen tekrar deneyin.');
    },
  });
};

// ðŸ”¹ Admin: Mesaj Listesi Hook'u
export const useContactMessages = (filters = {}) => {
  return useQuery({
    queryKey: ['admin', 'contact-messages', filters],
    queryFn: () => {
      const queryString = buildQueryString(filters);
      return apiRequest.get(`${ENDPOINTS.ADMIN.CONTACT_MESSAGES}${queryString}`);
    },
    select: (res) => res.data,
    staleTime: 2 * 60 * 1000, // 2 dakika
    keepPreviousData: true,
    refetchInterval: 30 * 1000, // 30 saniyede bir yenile
    refetchIntervalInBackground: true,
  });
};

// ðŸ”¹ Admin: Tek Mesaj DetayÄ± Hook'u
export const useContactMessageById = (messageId) => {
  return useQuery({
    queryKey: ['admin', 'contact-message', messageId],
    queryFn: () => {
      const endpoint = buildEndpoint(`${ENDPOINTS.ADMIN.CONTACT_MESSAGES}/:id`, { id: messageId });
      return apiRequest.get(endpoint);
    },
    select: (res) => res.data,
    enabled: !!messageId,
    staleTime: 5 * 60 * 1000, // 5 dakika
  });
};

// ðŸ”¹ Admin: Mesaj Durumu GÃ¼ncelleme Hook'u
export const useUpdateContactMessageStatus = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ messageId, status }) => {
      const endpoint = buildEndpoint(`${ENDPOINTS.ADMIN.CONTACT_MESSAGES}/:id/status`, { id: messageId });
      return apiRequest.patch(endpoint, { status });
    },
    onSuccess: (data, variables) => {
      // Tek mesajÄ± gÃ¼ncelle
      queryClient.setQueryData(['admin', 'contact-message', variables.messageId], data);
      // Mesaj listesini yenile
      queryClient.invalidateQueries(['admin', 'contact-messages']);
      // Ä°statistikleri yenile
      queryClient.invalidateQueries(['admin', 'contact-statistics']);
      
      showToast.success('Mesaj durumu gÃ¼ncellendi');
    },
    onError: (error) => {
      console.error('Mesaj durumu gÃ¼ncelleme hatasÄ±:', error);
      showToast.error('Mesaj durumu gÃ¼ncellenemedi');
    },
  });
};

// ðŸ”¹ Admin: Mesaja YanÄ±t Verme Hook'u
export const useReplyToContactMessage = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ messageId, adminReply }) => {
      const endpoint = buildEndpoint(`${ENDPOINTS.ADMIN.CONTACT_MESSAGES}/:id/reply`, { id: messageId });
      return apiRequest.post(endpoint, { admin_reply: adminReply });
    },
    onSuccess: (data, variables) => {
      // Tek mesajÄ± gÃ¼ncelle
      queryClient.setQueryData(['admin', 'contact-message', variables.messageId], data);
      // Mesaj listesini yenile
      queryClient.invalidateQueries(['admin', 'contact-messages']);
      // Ä°statistikleri yenile
      queryClient.invalidateQueries(['admin', 'contact-statistics']);
      
      showToast.success('YanÄ±t baÅŸarÄ±yla gÃ¶nderildi');
    },
    onError: (error) => {
      console.error('YanÄ±t gÃ¶nderme hatasÄ±:', error);
      showToast.error('YanÄ±t gÃ¶nderilemedi');
    },
  });
};

// ðŸ”¹ Admin: Mesaj Silme Hook'u
export const useDeleteContactMessage = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (messageId) => {
      const endpoint = buildEndpoint(`${ENDPOINTS.ADMIN.CONTACT_MESSAGES}/:id`, { id: messageId });
      return apiRequest.delete(endpoint);
    },
    onSuccess: (data, messageId) => {
      // Silinen mesajÄ± cache'den kaldÄ±r
      queryClient.removeQueries(['admin', 'contact-message', messageId]);
      // Mesaj listesini yenile
      queryClient.invalidateQueries(['admin', 'contact-messages']);
      // Ä°statistikleri yenile
      queryClient.invalidateQueries(['admin', 'contact-statistics']);
      
      showToast.success('Mesaj silindi');
    },
    onError: (error) => {
      console.error('Mesaj silme hatasÄ±:', error);
      showToast.error('Mesaj silinemedi');
    },
  });
};

// ðŸ”¹ Admin: Ä°letiÅŸim Ä°statistikleri Hook'u
export const useContactStatistics = (dateRange = {}) => {
  return useQuery({
    queryKey: ['admin', 'contact-statistics', dateRange],
    queryFn: () => {
      const queryString = buildQueryString(dateRange);
      return apiRequest.get(`${ENDPOINTS.ADMIN.CONTACT_STATISTICS}${queryString}`);
    },
    select: (res) => res.data,
    refetchInterval: 60 * 1000, // 1 dakikada bir yenile
    refetchIntervalInBackground: true,
  });
};

// ðŸ”¹ Admin: Toplu Durum GÃ¼ncelleme Hook'u
export const useBulkUpdateContactStatus = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: ({ messageIds, status }) => {
      return apiRequest.patch(`${ENDPOINTS.ADMIN.CONTACT_MESSAGES}/bulk-status`, { messageIds, status });
    },
    onSuccess: (data, variables) => {
      // TÃ¼m mesaj query'lerini yenile
      queryClient.invalidateQueries(['admin', 'contact-messages']);
      queryClient.invalidateQueries(['admin', 'contact-statistics']);
      
      showToast.success(`${variables.messageIds.length} mesajÄ±n durumu gÃ¼ncellendi`);
    },
    onError: (error) => {
      console.error('Toplu durum gÃ¼ncelleme hatasÄ±:', error);
      showToast.error('Toplu durum gÃ¼ncelleme baÅŸarÄ±sÄ±z');
    },
  });
};

// ðŸ”¹ Admin: Toplu Mesaj Silme Hook'u
export const useBulkDeleteContactMessages = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: (messageIds) => {
      return apiRequest.delete(`${ENDPOINTS.ADMIN.CONTACT_MESSAGES}/bulk`, { data: { messageIds } });
    },
    onSuccess: (data, messageIds) => {
      // Silinen mesajlarÄ± cache'den kaldÄ±r
      messageIds.forEach(messageId => {
        queryClient.removeQueries(['admin', 'contact-message', messageId]);
      });
      // Mesaj listesini yenile
      queryClient.invalidateQueries(['admin', 'contact-messages']);
      // Ä°statistikleri yenile
      queryClient.invalidateQueries(['admin', 'contact-statistics']);
      
      showToast.success(`${messageIds.length} mesaj silindi`);
    },
    onError: (error) => {
      console.error('Toplu mesaj silme hatasÄ±:', error);
      showToast.error('Toplu mesaj silme baÅŸarÄ±sÄ±z');
    },
  });
};

// Default export - TÃ¼m contact hooks
const useContactHooks = {
  // Public
  useSendMessage,
  
  // Admin
  useContactMessages,
  useContactMessageById,
  useUpdateContactMessageStatus,
  useReplyToContactMessage,
  useDeleteContactMessage,
  useContactStatistics,
  useBulkUpdateContactStatus,
  useBulkDeleteContactMessages,
};

export default useContactHooks;
